Code Part
function [solution, scurrent] = Tabu(tabuLen, sinitial, alInitial, iter)
tabu = zeros(tabuLen, 1);
al = alInitial;
s = sinitial;
tabuInd = 1;
BIGNUM = 100000;
solution = zeros(iter, 3);
scurrent = zeros(iter, length(sinitial));
costs = zeros(1, length(sinitial));

for i=1:iter
    neighbors = neighborhood(s);

    for j=1:size(neighbors,1)
        costs(j) = costSAT(neighbors(j,:));
        
        if (costs(j) >= 1) 
            j
            costs
            neighbors
        end
    end
    
    [val, index] = min(costs);
    s = neighbors(index,:);
    
    if (sum(tabu==index) == 0) 
        %disp 'not tabued'
        % Not found
        tabu(tabuInd) = index;
        tabuInd = tabuInd + 1;
        if tabuInd > tabuLen
            tabuInd = 1;
        end

        % update al
        if (val < al)
            al = val;
        end
    else
        if (val < al)
            %disp 'tabued, improved'
            tabu(tabuInd) = index;
            tabuInd = tabuInd + 1;
            if tabuInd > tabuLen
                tabuInd = 1;
            end

            % update al
            al = val;
        else
            %disp 'tabued, not improved'
            while (sum(tabu==index) > 0)
                costs(index) = BIGNUM;
                [val, index] = min(costs);
                if (val == BIGNUM) 
                    break; 
                end
            end

            if (val == BIGNUM) 
                fprintf('Something is messed up in iteration %d dude... fix it.\n', i);
            else
                s = neighbors(index,:);
                tabu(tabuInd) = index;
                tabuInd = tabuInd + 1;
                if tabuInd > tabuLen
                    tabuInd = 1;
                end
            end
        end 
    end
    solution(i, 1) = i;
    solution(i, 2) = val;
    solution(i, 3) = al;
    scurrent(i, :) = s;

end

costSAT.m
function percent_unSAT = costSAT(solution)

global dataleng;
global data;

unSAT = 0.;
for i = 1 : dataleng
    
    unSAT = unSAT + 1.;
    for j = 1 : 3
        d = data(i, j);
        if d > 0
            if (solution(d))
                unSAT = unSAT - 1.;
                break;
            end
        else
            if (~solution(-d)) 
                unSAT = unSAT - 1.;
                break;
            end
        end
    end
end

percent_unSAT = unSAT / dataleng;

if (percent_unSAT >= 1) 
    unSAT
    dataleng
    solution
end

neighborhood.m
function M = neighborhood(s0)

M = zeros(length(s0));


for i = 1 : length(s0)
    M(i, :) = s0;
    M(i, i) = ~s0(i);
end
