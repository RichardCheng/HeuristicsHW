%%% Determine the parameters.
% Constants
K = 1;
POP_SIZE = 50;
ITERATION = 200;
% Arbitrarily define reference points to test other parameters
P_MUTATION_REF = 0.7;
P_CROSSOVER_REF = 0.8;
V_REF = 2;

pMutationRes = zeros(11,1);
pCrossoverRes = zeros(11,1);
pVarRes = zeros(11,1);
pRandRes = zeros(11,1);

for temp = 1:10
    temp
    % Generate initial population. n=?
    InitPop = generatePopulation(POP_SIZE, 20);
    
    % Determine the pMutation
    for r = 1:11
        ip = generatePopulation(POP_SIZE * ITERATION, 20);
        res = zeros(POP_SIZE * ITERATION, 1);
        for rr = 1: POP_SIZE * ITERATION
            res(rr) = fitness2Q(ip(rr, :));
        end
        pRandRes(r) = pRandRes(r) + max(res);
    end

    % Determine the pMutation
    for pM = 0:0.1:1
        result = GAReal2Q(InitPop, POP_SIZE, ITERATION, P_CROSSOVER_REF, pM, V_REF);
        pMutationRes(floor(pM*10)+1) = pMutationRes(floor(pM*10)+1) + result(ITERATION);
    end

    % Determine the pCrossover
    for pC = 0:0.1:1
        result = GAReal2Q(InitPop, POP_SIZE, ITERATION, pC, P_MUTATION_REF, V_REF);
        pCrossoverRes(floor(pC*10)+1) = pCrossoverRes(floor(pC*10)+1) + result(ITERATION);
    end

    % Determine the variance
    for pV = 0:1:10
        result = GAReal2Q(InitPop, POP_SIZE, ITERATION, P_CROSSOVER_REF, P_MUTATION_REF, pV);
        pVarRes(floor(pV)+1) = pVarRes(floor(pV)+1) + result(ITERATION);
    end
end

figure;
plot(1:11, pRandRes ./ 11);

figure;
plot(0:0.1:1, pMutationRes ./ 11);

figure;
plot(0:0.1:1, pCrossoverRes ./ 11);

figure;
plot(0:1:10, pVarRes ./ 11);
